{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Last 60 seconds\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"p\", null, _toDisplayString($setup.response), 1 /* TEXT */), _hoisted_1, _createElementVNode(\"p\", null, \" Feature A count \" + _toDisplayString($setup.featureACount) + \" Feature B count \" + _toDisplayString($setup.featureBCount), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_toDisplayString","$setup","response","_hoisted_1","featureACount","featureBCount"],"sources":["C:\\Projects\\Devoxx2023\\hello-world\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n\t<p>\n\t\t{{ response }}\n\t</p>\n\t<h1>Last 60 seconds</h1>\n\t<p>\n\t\tFeature A count\n\t\t{{ featureACount }}\n\t\tFeature B count {{ featureBCount }}\n\t</p>\n</template>\n\n \n<script>\nimport { ref, onMounted } from \"vue\";\n\nexport default {\n\tname: \"HelloWorld\",\n\tprops: {},\n\tsetup() {\n\t\tconst response = ref(\"\");\n\t\tconst featureACount = ref(0);\n\t\tconst featureBCount = ref(0);\n\t\tlet count = 0;\n\n\t\tfunction fetchData() {\n\t\t\t// I prefer to use fetch\n\t\t\t// you can use use axios as an alternative\n\t\t\treturn fetch(\n\t\t\t\t\"http://localhost:5216/BlueGreenDemo\"\n\t\t\t)\n\t\t\t\t.then(async (res) => {\n\t\t\t\t\tresponse.value = await res.text();\n          print(response.value);\n\t\t\t\t\tif (response.value === \"You are in feature A\") {\n\t\t\t\t\t\tfeatureACount.value++;\n\t\t\t\t\t}\n\t\t\t\t\tif (response.value.indexOf(\"feature B\") > -1) {\n\t\t\t\t\t\tfeatureBCount.value++;\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(`response is ${response.value} - featureACount: ${featureACount.value}, featureB Count: ${featureBCount.value}`);\n\t\t\t\t\tif (count > 60) {\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\t\t}\n\n\t\tonMounted(() => {\n\t\t\tsetInterval(() => fetchData(), 300);\n\t\t});\n\n\t\treturn {\n\t\t\tfeatureACount,\n\t\t\tfeatureBCount,\n\t\t\tresponse,\n\t\t\tcount,\n\t\t};\n\t},\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":";;gEAICA,mBAAA,CAAwB,YAApB,iBAAe;;;6DAHnBA,mBAAA,CAEI,WAAAC,gBAAA,CADAC,MAAA,CAAAC,QAAQ,kBAEZC,UAAwB,EACxBJ,mBAAA,CAII,WAJD,mBAEF,GAAAC,gBAAA,CAAGC,MAAA,CAAAG,aAAa,IAAG,mBACH,GAAAJ,gBAAA,CAAGC,MAAA,CAAAI,aAAa,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}